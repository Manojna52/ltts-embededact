
bin\Debug\activity3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001c6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .fuse         00000003  00820000  00820000  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000023d  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000050  00000000  00000000  0000025d  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000034f  00000000  00000000  000002ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001bf  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002fd  00000000  00000000  000007bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f3  00000000  00000000  00000af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000008b  00000000  00000000  00000beb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000c76  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  78:	0c 94 e1 00 	jmp	0x1c2	; 0x1c2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initADC>:
#include<util/delay.h>
#include<avr/interrupt.h>
void initADC()
{

    ADMUX=(1<<REFS0);
  80:	80 e4       	ldi	r24, 0x40	; 64
  82:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA=(1<<ADEN)|(7<<ADPS0);
  86:	87 e8       	ldi	r24, 0x87	; 135
  88:	80 93 7a 00 	sts	0x007A, r24
}
  8c:	08 95       	ret

0000008e <ReadADC>:
uint16_t ReadADC(uint8_t ch)
{

    ADMUX&=0xf8;
  8e:	90 91 7c 00 	lds	r25, 0x007C
  92:	98 7f       	andi	r25, 0xF8	; 248
  94:	90 93 7c 00 	sts	0x007C, r25
    ch=ch&0b00000111;
    ADMUX|=ch;
  98:	90 91 7c 00 	lds	r25, 0x007C
  9c:	87 70       	andi	r24, 0x07	; 7
  9e:	89 2b       	or	r24, r25
  a0:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA|=(1<<ADSC);
  a4:	80 91 7a 00 	lds	r24, 0x007A
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	80 93 7a 00 	sts	0x007A, r24
    while(!(ADCSRA&(1<<ADIF)));
  ae:	80 91 7a 00 	lds	r24, 0x007A
  b2:	84 ff       	sbrs	r24, 4
  b4:	fc cf       	rjmp	.-8      	; 0xae <ReadADC+0x20>
    ADCSRA|=(1<<ADIF);
  b6:	80 91 7a 00 	lds	r24, 0x007A
  ba:	80 61       	ori	r24, 0x10	; 16
  bc:	80 93 7a 00 	sts	0x007A, r24
    return(ADC);
  c0:	20 91 78 00 	lds	r18, 0x0078
  c4:	30 91 79 00 	lds	r19, 0x0079
}
  c8:	c9 01       	movw	r24, r18
  ca:	08 95       	ret

000000cc <main>:
#include<util/delay.h>
#include<avr/interrupt.h>
void initADC()
{

    ADMUX=(1<<REFS0);
  cc:	80 e4       	ldi	r24, 0x40	; 64
  ce:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA=(1<<ADEN)|(7<<ADPS0);
  d2:	87 e8       	ldi	r24, 0x87	; 135
  d4:	80 93 7a 00 	sts	0x007A, r24
}

int main(void)
{
initADC();
TCCR0A |=(1<<COM0A1)|(1<<WGM01)|(1<<WGM00);
  d8:	84 b5       	in	r24, 0x24	; 36
  da:	83 68       	ori	r24, 0x83	; 131
  dc:	84 bd       	out	0x24, r24	; 36
TCCR0B|=(1<<CS00)|(1<<CS01);
  de:	85 b5       	in	r24, 0x25	; 37
  e0:	83 60       	ori	r24, 0x03	; 3
  e2:	85 bd       	out	0x25, r24	; 37
DDRD|=(1<<PD6);
  e4:	56 9a       	sbi	0x0a, 6	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  e6:	40 e9       	ldi	r20, 0x90	; 144
  e8:	51 e0       	ldi	r21, 0x01	; 1
           OCR0A=179;
        _delay_ms(2000);

      }
      else{
           OCR0A=243;
  ea:	e3 ef       	ldi	r30, 0xF3	; 243
        _delay_ms(2000);

      }
      else if(temp>=510 && temp<=700)
      {
           OCR0A=179;
  ec:	f3 eb       	ldi	r31, 0xB3	; 179

      }
      else if(temp>=210 && temp<=500)
      {

 OCR0A=105;
  ee:	a9 e6       	ldi	r26, 0x69	; 105
    {
      temp=ReadADC(0);
      _delay_ms(1000);
      if((temp>=0 && temp<=200))
      {
         OCR0A=52;
  f0:	b4 e3       	ldi	r27, 0x34	; 52
    ADCSRA=(1<<ADEN)|(7<<ADPS0);
}
uint16_t ReadADC(uint8_t ch)
{

    ADMUX&=0xf8;
  f2:	80 91 7c 00 	lds	r24, 0x007C
  f6:	88 7f       	andi	r24, 0xF8	; 248
  f8:	80 93 7c 00 	sts	0x007C, r24
    ch=ch&0b00000111;
    ADMUX|=ch;
  fc:	80 91 7c 00 	lds	r24, 0x007C
 100:	80 93 7c 00 	sts	0x007C, r24
    ADCSRA|=(1<<ADSC);
 104:	80 91 7a 00 	lds	r24, 0x007A
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 93 7a 00 	sts	0x007A, r24
    while(!(ADCSRA&(1<<ADIF)));
 10e:	80 91 7a 00 	lds	r24, 0x007A
 112:	84 ff       	sbrs	r24, 4
 114:	fc cf       	rjmp	.-8      	; 0x10e <main+0x42>
    ADCSRA|=(1<<ADIF);
 116:	80 91 7a 00 	lds	r24, 0x007A
 11a:	80 61       	ori	r24, 0x10	; 16
 11c:	80 93 7a 00 	sts	0x007A, r24
    return(ADC);
 120:	60 91 78 00 	lds	r22, 0x0078
 124:	70 91 79 00 	lds	r23, 0x0079
 128:	20 e0       	ldi	r18, 0x00	; 0
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	ca 01       	movw	r24, r20
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x62>
 132:	2f 5f       	subi	r18, 0xFF	; 255
 134:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 136:	87 e2       	ldi	r24, 0x27	; 39
 138:	20 31       	cpi	r18, 0x10	; 16
 13a:	38 07       	cpc	r19, r24
 13c:	b9 f7       	brne	.-18     	; 0x12c <main+0x60>
uint16_t temp;
    while(1)
    {
      temp=ReadADC(0);
      _delay_ms(1000);
      if((temp>=0 && temp<=200))
 13e:	69 3c       	cpi	r22, 0xC9	; 201
 140:	71 05       	cpc	r23, r1
 142:	68 f4       	brcc	.+26     	; 0x15e <main+0x92>
      {
         OCR0A=52;
 144:	b7 bd       	out	0x27, r27	; 39
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	ca 01       	movw	r24, r20
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	f1 f7       	brne	.-4      	; 0x14c <main+0x80>
 150:	2f 5f       	subi	r18, 0xFF	; 255
 152:	3f 4f       	sbci	r19, 0xFF	; 255
 154:	8e e4       	ldi	r24, 0x4E	; 78
 156:	20 32       	cpi	r18, 0x20	; 32
 158:	38 07       	cpc	r19, r24
 15a:	b9 f7       	brne	.-18     	; 0x14a <main+0x7e>
 15c:	ca cf       	rjmp	.-108    	; 0xf2 <main+0x26>
        _delay_ms(2000);

      }
      else if(temp>=210 && temp<=500)
 15e:	cb 01       	movw	r24, r22
 160:	82 5d       	subi	r24, 0xD2	; 210
 162:	90 40       	sbci	r25, 0x00	; 0
 164:	83 52       	subi	r24, 0x23	; 35
 166:	91 40       	sbci	r25, 0x01	; 1
 168:	68 f4       	brcc	.+26     	; 0x184 <main+0xb8>
      {

 OCR0A=105;
 16a:	a7 bd       	out	0x27, r26	; 39
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	ca 01       	movw	r24, r20
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0xa6>
 176:	2f 5f       	subi	r18, 0xFF	; 255
 178:	3f 4f       	sbci	r19, 0xFF	; 255
 17a:	8e e4       	ldi	r24, 0x4E	; 78
 17c:	20 32       	cpi	r18, 0x20	; 32
 17e:	38 07       	cpc	r19, r24
 180:	b9 f7       	brne	.-18     	; 0x170 <main+0xa4>
 182:	b7 cf       	rjmp	.-146    	; 0xf2 <main+0x26>
        _delay_ms(2000);

      }
      else if(temp>=510 && temp<=700)
 184:	6e 5f       	subi	r22, 0xFE	; 254
 186:	71 40       	sbci	r23, 0x01	; 1
 188:	6f 3b       	cpi	r22, 0xBF	; 191
 18a:	71 05       	cpc	r23, r1
 18c:	68 f4       	brcc	.+26     	; 0x1a8 <main+0xdc>
      {
           OCR0A=179;
 18e:	f7 bd       	out	0x27, r31	; 39
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	ca 01       	movw	r24, r20
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0xca>
 19a:	2f 5f       	subi	r18, 0xFF	; 255
 19c:	3f 4f       	sbci	r19, 0xFF	; 255
 19e:	8e e4       	ldi	r24, 0x4E	; 78
 1a0:	20 32       	cpi	r18, 0x20	; 32
 1a2:	38 07       	cpc	r19, r24
 1a4:	b9 f7       	brne	.-18     	; 0x194 <main+0xc8>
 1a6:	a5 cf       	rjmp	.-182    	; 0xf2 <main+0x26>
        _delay_ms(2000);

      }
      else{
           OCR0A=243;
 1a8:	e7 bd       	out	0x27, r30	; 39
 1aa:	20 e0       	ldi	r18, 0x00	; 0
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	ca 01       	movw	r24, r20
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <main+0xe4>
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
 1b8:	8e e4       	ldi	r24, 0x4E	; 78
 1ba:	20 32       	cpi	r18, 0x20	; 32
 1bc:	38 07       	cpc	r19, r24
 1be:	b9 f7       	brne	.-18     	; 0x1ae <main+0xe2>
 1c0:	98 cf       	rjmp	.-208    	; 0xf2 <main+0x26>

000001c2 <_exit>:
 1c2:	f8 94       	cli

000001c4 <__stop_program>:
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <__stop_program>
